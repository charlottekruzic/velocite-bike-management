package fr.ufc.l3info.oprog;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;

public class ExploitantTest {

    private static final double DELTA = 1e-15;

    private Exploitant e;
    @Before
    public void setUp() {
        e = new Exploitant();
    }

    /**
     * Tests acquerir velo
     */
    @Test
    public void testAcquerirVeloOK(){
        IVelo v = new Velo();
        e.acquerirVelo(v);
        //1 vélo
    }

    @Test
    public void testAcquerirVeloDejaPossede(){
        IVelo v = new Velo();
        e.acquerirVelo(v);
        e.acquerirVelo(v);
        //Que 1 seul
    }

    @Test
    public void testAcquerirVeloInexistant(){
        e.acquerirVelo(null);
        //Ne rien faire
    }

    /**
     * Tests entretenir velo
     */

    @Test
    public void testEntretenirVeloStockAbime(){
        //Ajout de vélos abimés au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.abimer();
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
    }

    @Test
    public void testEntretenirVeloStockAReviser(){
        //Ajout de vélos à réviser au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(600);
        v2.parcourir(550);
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    @Test
    public void testEntretenirVeloStockPasAReviser(){
        //Ajout de vélos à réviser au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(250);
        v2.parcourir(330);
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertEquals(250, v1.prochaineRevision(), DELTA);
        assertEquals(270, v2.prochaineRevision(), DELTA);
    }

    @Test
    public void testEntretenirVeloStockAbimeEtAReviser(){
        //Ajout de vélos à réviser et abimé au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(600);
        v1.abimer();
        v2.parcourir(550);
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    @Test
    public void testEntretenirVeloStockNonAbimeNonAReviser(){
        //Ajout de vélos au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    @Test
    public void testEntretenirVeloSansStock(){
        //Entretenir
        e.entretenirVelos();
        //Ne dois pas retourner d'erreurs
    }

    @Test
    public void testEntretenirVeloStockMelange(){
        //Ajout de vélos au stock
        IVelo v1 = new Velo();
        v1.parcourir(600);
        v1.abimer();
        IVelo v2 = new Velo();
        v2.abimer();
        IVelo v3 = new Velo();
        v1.parcourir(530);
        IVelo v4 = new Velo();
        //Acquisition des vélos
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        e.acquerirVelo(v3);
        e.acquerirVelo(v4);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertFalse(v3.estAbime());
        assertFalse(v4.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
        assertEquals(500, v3.prochaineRevision(), DELTA);
        assertEquals(500, v4.prochaineRevision(), DELTA);
    }

    /**
     * Tests ravitailler
     */

    @Test
    public void testRavitaillerStockVeloBonEtat() throws IOException {
        //Initialisation du stock de vélos
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés et à réviser à la station de la ville
        Station s =ville.getStation("Avenue du Maréchal Foch");
        IVelo v3 = new Velo();
        v3.parcourir(550);
        IVelo v4 = new Velo();
        s.arrimerVelo(v3,0);
        s.arrimerVelo(v4,1);
        v4.abimer();

        e.ravitailler(ville);

        for(int i=0;i<s.capacite();i++){//On ne sait pas où ils ont été mis
            if(s.veloALaBorne(i)!=null){
                assertFalse(s.veloALaBorne(i).estAbime());
                assertEquals(500,s.veloALaBorne(i).prochaineRevision(), DELTA);
            }
        }
        assertTrue(v3.estAbime());
        assertEquals(-50,v4.prochaineRevision(), DELTA);
    }

    @Test
    public void testRavitaillerStockVeloAbime() throws IOException {
        //Initialisation du stock de vélos abimé
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.abimer();
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés à la station de la ville
        Station s =ville.getStation("Avenue du Maréchal Foch");
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        s.arrimerVelo(v3,0);
        s.arrimerVelo(v4,1);
        v3.abimer();
        v4.abimer();

        e.ravitailler(ville);

        for(int i=0;i<s.capacite();i++){//On ne sait pas où ils ont été mis
            if(s.veloALaBorne(i)!=null){
                assertTrue(s.veloALaBorne(i).estAbime());
            }
        }
        assertTrue(v1.estAbime());
        assertTrue(v2.estAbime());
        assertTrue(v3.estAbime());
        assertTrue(v4.estAbime());
    }

    @Test
    public void testRavitaillerStockVeloAReviser() throws IOException {
        //Initialisation du stock de vélos à réviser
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(550);
        v2.parcourir(600);
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos à réviser à la station de la ville
        Station s =ville.getStation("Avenue du Maréchal Foch");
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        v1.parcourir(850);
        v2.parcourir(600);
        s.arrimerVelo(v3,0);
        s.arrimerVelo(v4,1);

        e.ravitailler(ville);

        for(int i=0;i<s.capacite();i++){//On ne sait pas où ils ont été mis
            if(s.veloALaBorne(i)!=null){
                assertTrue(s.veloALaBorne(i).prochaineRevision()<0);
            }
        }
        assertTrue(v1.prochaineRevision()<0);
        assertTrue(v2.prochaineRevision()<0);
        assertTrue(v3.prochaineRevision()<0);
        assertTrue(v4.prochaineRevision()<0);
    }

    @Test
    public void testRavitaillerSansStockVelo() throws IOException {
        //Initialisation du stock de vélos

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés et à réviser à la station de la ville
        Station s =ville.getStation("Avenue du Maréchal Foch");
        IVelo v3 = new Velo();
        v3.parcourir(550);
        IVelo v4 = new Velo();
        s.arrimerVelo(v3,0);
        s.arrimerVelo(v4,1);
        v4.abimer();

        e.ravitailler(ville);

        //Les vélos ont été enlevé mais il n'y en avait pas pour les remplacer
        for(int i=0;i<s.capacite();i++){
            assertNull(s.veloALaBorne(i));
        }
    }

    @Test
    public void testRavitaillerAvecVelosSupplementaires() throws IOException { //Après avoir tout remplacé il reste des vélos en bon état
        //Initialisation du stock de vélos
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        IVelo v3 = new Velo();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        e.acquerirVelo(v3);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés à la station de la ville
        Station s =ville.getStation("Avenue du Maréchal Foch");
        IVelo v4 = new Velo();
        s.arrimerVelo(v4,0);
        v4.abimer();

        e.ravitailler(ville);

        int nb_velo_borne = 0;
        for(int i=0;i<s.capacite();i++){//On ne sait pas où ils ont été mis
            if(s.veloALaBorne(i)!=null){
                nb_velo_borne++;
            }
        }
        assertEquals(3, nb_velo_borne);
        assertTrue(v4.estAbime());
    }

    @Test
    public void testRavitaillerReequilibrer() throws IOException { //Reequilibrer les stations pour qu'il y ait la moitier rempli comme TP précédent
        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        Station s =ville.getStation("Avenue du Maréchal Foch");

        //Initialisation du stock de vélos
        for(int i=0;i<s.capacite();i++){
            IVelo v = new Velo();
            e.acquerirVelo(v);
        }

        e.ravitailler(ville);

        //Vérification de l'équilibrage de la station
        int nb_velo_borne = 0;
        for(int i=0;i<s.capacite();i++){//On ne sait pas où ils ont été mis
            if(s.veloALaBorne(i)!=null){
                nb_velo_borne++;
            }
        }
        assertEquals(5, nb_velo_borne);
    }

}
