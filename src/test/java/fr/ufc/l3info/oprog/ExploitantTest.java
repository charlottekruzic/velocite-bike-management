package fr.ufc.l3info.oprog;

import org.junit.Assert;
import org.junit.Before;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;

public class ExploitantTest {

    private static final double DELTA = 1e-15;

    private Exploitant e;
    @Before
    public void setUp() {
        e = new Exploitant();
    }

    /**
     * Tests acquerir velo
     */
    public void testAcquerirVeloOK(){
        IVelo v = new Velo();
        e.acquerirVelo(v);

    }

    public void testAcquerirVeloDejaPossede(){
        IVelo v = new Velo();
        e.acquerirVelo(v);
        e.acquerirVelo(v);

    }

    public void testAcquerirVeloInexistant(){
        e.acquerirVelo(null);

    }

    /**
     * Tests entretenir velo
     */

    public void testEntretenirVeloStockAbime(){
        //Ajout de vélos abimés au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.abimer();
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
    }

    public void testEntretenirVeloStockAReviser(){
        //Ajout de vélos à réviser au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(600);
        v2.parcourir(550);
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    public void testEntretenirVeloStockPasAReviser(){
        //Ajout de vélos à réviser au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(250);
        v2.parcourir(330);
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertEquals(250, v1.prochaineRevision(), DELTA);
        assertEquals(270, v2.prochaineRevision(), DELTA);
    }

    public void testEntretenirVeloStockAbimeEtAReviser(){
        //Ajout de vélos à réviser et abimé au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.parcourir(600);
        v1.abimer();
        v2.parcourir(550);
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    public void testEntretenirVeloStockNonAbimeNonAReviser(){
        //Ajout de vélos au stock
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
    }

    public void testEntretenirVeloSansStock(){
        //Entretenir
        e.entretenirVelos();
        //Ne dois pas retourner d'erreurs
    }

    public void testEntretenirVeloStockMelange(){
        //Ajout de vélos au stock
        IVelo v1 = new Velo();
        v1.parcourir(600);
        v1.abimer();
        IVelo v2 = new Velo();
        v2.abimer();
        IVelo v3 = new Velo();
        v1.parcourir(530);
        IVelo v4 = new Velo();
        //Acquisition des vélos
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        e.acquerirVelo(v3);
        e.acquerirVelo(v4);
        //Entretenir
        e.entretenirVelos();

        assertFalse(v1.estAbime());
        assertFalse(v2.estAbime());
        assertFalse(v3.estAbime());
        assertFalse(v4.estAbime());
        assertEquals(500, v1.prochaineRevision(), DELTA);
        assertEquals(500, v2.prochaineRevision(), DELTA);
        assertEquals(500, v3.prochaineRevision(), DELTA);
        assertEquals(500, v4.prochaineRevision(), DELTA);
    }

    /**
     * Tests ravitailler
     */

    public void testRavitaillerStockVeloBonEtat() throws IOException {
        //Initialisation du stock de vélos
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés à la station de la ville
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        ville.getStation("Avenue du Maréchal Foch").arrimerVelo(v3,0);
        ville.getStation("Avenue du Maréchal Foch").arrimerVelo(v4,1);
        v3.abimer();
        v4.abimer();

        e.ravitailler(ville);
        //Les vélos aux bornes ne doivent plus être abimés, mais ceux mis au départ doivent toujours l'être
        // = ils ont été changé, pas réparé
        assertFalse(ville.getStation("Avenue du Maréchal Foch").veloALaBorne(0).estAbime());
        assertFalse(ville.getStation("Avenue du Maréchal Foch").veloALaBorne(1).estAbime());
        assertTrue(v3.estAbime());
        assertTrue(v4.estAbime());
    }

    public void testRavitaillerStockVeloAbime() throws IOException {
        //Initialisation du stock de vélos abimé
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        v1.abimer();
        v2.abimer();
        e.acquerirVelo(v1);
        e.acquerirVelo(v2);

        //Initialisation de la ville / des stations
        File f = new File("./target/classes/data/stationsOK.txt");
        Ville ville = new Ville();
        ville.initialiser(f);

        //Ajout de vélos abimés à la station de la ville
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        ville.getStation("Avenue du Maréchal Foch").arrimerVelo(v3,0);
        ville.getStation("Avenue du Maréchal Foch").arrimerVelo(v4,1);
        v3.abimer();
        v4.abimer();

        e.ravitailler(ville);
        //Les vélos aux bornes doivent encore être abimés, et ceux mis au départ doivent aussi toujours l'être
        // = il ne s'est rien passé
        assertTrue(ville.getStation("Avenue du Maréchal Foch").veloALaBorne(0).estAbime());
        assertTrue(ville.getStation("Avenue du Maréchal Foch").veloALaBorne(1).estAbime());
        assertTrue(v1.estAbime());
        assertTrue(v2.estAbime());
        assertTrue(v3.estAbime());
        assertTrue(v4.estAbime());
    }

    public void testRavitaillerStockVeloAReviser() throws IOException {

    }

    public void testRavitaillerVilleToutesLesBornesRemplies(){


    }

    public void testRavitaillerSansStockVelo(){

    }

    public void testRavitaillerAvecVelosSupplementaires(){ //Après avoir tout remplacé il reste des vélos en bon état

    }

    public void testRavitaillerReequilibrer(){ //Reequilibrer les stations pour qu'il y ait la moitier rempli comme TP précédent

    }

}
